server_tokens off;

## Start: Size Limits & Buffer Overflows ##
client_body_buffer_size  1K;
client_header_buffer_size 1k;
client_max_body_size 10M;
large_client_header_buffers 2 1k;
types_hash_max_size 2048;
server_names_hash_bucket_size 128;
server_names_hash_max_size 10240;
## End: Size Limits & Buffer Overflows ##

## Start: Timeouts ##
client_body_timeout   10;
client_header_timeout 10;
keepalive_timeout     5 5;
send_timeout          10;
## End: Timeouts ##

## Start: Session & Request Limits ##
### Control maximum number of simultaneous connections for one session i.e.
### restricts the amount of connections from a single ip address
### !!! DANGEROUS, can block a corporate site !!!
limit_conn slimits 100;
### Directive describes the zone, in which the session states are stored i.e. store in slimits.
### 1m can handle 32000 sessions with 32 bytes/session, set to 5m x 32000 session.
limit_conn_zone $binary_remote_addr zone=slimits:5m;
limit_conn_status 429;

map $request_method $limit {
  default $binary_remote_addr;
  GET     "";
}
limit_req_zone $limit zone=global:10m rate=30r/m;
limit_req_zone $limit zone=admin:10m rate=3r/m;
limit_req_log_level warn;
limit_req_status 429;
limit_req zone=global burst=5 nodelay;

## End: Session & Request Limits ##

## Start: File Descriptor Cache ##
### Nginx has the option to cache file descriptors, meaning that if the same
### file is accessed many times, Nginx will be able to fetch in faster from
### the file system.
open_file_cache max=1000 inactive=20s;
open_file_cache_valid 30s;
open_file_cache_min_uses 2;
open_file_cache_errors on;
## End: File Desciptor Cache ##

## Start: HTTP Range Attack Protection ##
### Protect from HTTP Range Attack for Proxy Pass.
### Will need to pass this to proxy_pass locations setting as follow: 
###  proxy_set_header Range $saferange;
map $http_range $saferange {
        "~\d{10,}" "";  # if it matches a string of 10 or more integers, remove it
        default $http_range;
}
## End: HTTP Range Attack Protection ##

## Start: Default SSL Security ##
### Disable old protocols and obsolete ciphers
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
ssl_prefer_server_ciphers on;
## End: Default SSL Security ##

disable_symlinks if_not_owner from=$document_root;
